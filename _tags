# OASIS_START
# DO NOT EDIT (digest: 0c1ada3b2baad60ee5b9d6d565007b03)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library xenstore
"core/xenstore.cmxs": use_xenstore
"core/protocol.cmx": for-pack(Xenstore)
"core/handle.cmx": for-pack(Xenstore)
"core/client.cmx": for-pack(Xenstore)
"core/domainWatch.cmx": for-pack(Xenstore)
"core/introduceDomain.cmx": for-pack(Xenstore)
"core/bufferedReader.cmx": for-pack(Xenstore)
"core/packetReader.cmx": for-pack(Xenstore)
"core/writeBufferStream.cmx": for-pack(Xenstore)
"core/packetWriter.cmx": for-pack(Xenstore)
"core/logging.cmx": for-pack(Xenstore)
"core/iO_lwt.cmx": for-pack(Xenstore)
"core/s.cmx": for-pack(Xenstore)
<core/*.ml{,i,y}>: pkg_cstruct
<core/*.ml{,i,y}>: pkg_cstruct.syntax
<core/*.ml{,i,y}>: pkg_lwt
<core/*.ml{,i,y}>: pkg_lwt.syntax
<core/*.ml{,i,y}>: pkg_sexplib
<core/*.ml{,i,y}>: pkg_sexplib.syntax
<core/*.ml{,i,y}>: pkg_stringext
<core/*.ml{,i,y}>: pkg_uri
# Library xenstore_userspace
"userspace/xenstore_userspace.cmxs": use_xenstore_userspace
<userspace/xenstore_userspace.{cma,cmxa}>: oasis_library_xenstore_userspace_cclib
"userspace/libxenstore_userspace_stubs.lib": oasis_library_xenstore_userspace_cclib
"userspace/dllxenstore_userspace_stubs.dll": oasis_library_xenstore_userspace_cclib
"userspace/libxenstore_userspace_stubs.a": oasis_library_xenstore_userspace_cclib
"userspace/dllxenstore_userspace_stubs.so": oasis_library_xenstore_userspace_cclib
<userspace/xenstore_userspace.{cma,cmxa}>: use_libxenstore_userspace_stubs
<userspace/*.ml{,i,y}>: pkg_cstruct
<userspace/*.ml{,i,y}>: pkg_cstruct.lwt
<userspace/*.ml{,i,y}>: pkg_cstruct.syntax
<userspace/*.ml{,i,y}>: pkg_io-page
<userspace/*.ml{,i,y}>: pkg_io-page.unix
<userspace/*.ml{,i,y}>: pkg_lwt
<userspace/*.ml{,i,y}>: pkg_lwt.syntax
<userspace/*.ml{,i,y}>: pkg_lwt.unix
<userspace/*.ml{,i,y}>: pkg_sexplib
<userspace/*.ml{,i,y}>: pkg_sexplib.syntax
<userspace/*.ml{,i,y}>: pkg_stringext
<userspace/*.ml{,i,y}>: pkg_uri
<userspace/*.ml{,i,y}>: use_xenstore
"userspace/domains_stubs.c": pkg_cstruct
"userspace/domains_stubs.c": pkg_cstruct.lwt
"userspace/domains_stubs.c": pkg_cstruct.syntax
"userspace/domains_stubs.c": pkg_io-page
"userspace/domains_stubs.c": pkg_io-page.unix
"userspace/domains_stubs.c": pkg_lwt
"userspace/domains_stubs.c": pkg_lwt.syntax
"userspace/domains_stubs.c": pkg_lwt.unix
"userspace/domains_stubs.c": pkg_sexplib
"userspace/domains_stubs.c": pkg_sexplib.syntax
"userspace/domains_stubs.c": pkg_stringext
"userspace/domains_stubs.c": pkg_uri
"userspace/domains_stubs.c": use_xenstore
# Executable core_test
<core_test/core_test.{native,byte}>: pkg_cstruct
<core_test/core_test.{native,byte}>: pkg_cstruct.lwt
<core_test/core_test.{native,byte}>: pkg_cstruct.syntax
<core_test/core_test.{native,byte}>: pkg_io-page
<core_test/core_test.{native,byte}>: pkg_io-page.unix
<core_test/core_test.{native,byte}>: pkg_lwt
<core_test/core_test.{native,byte}>: pkg_lwt.syntax
<core_test/core_test.{native,byte}>: pkg_lwt.unix
<core_test/core_test.{native,byte}>: pkg_oUnit
<core_test/core_test.{native,byte}>: pkg_sexplib
<core_test/core_test.{native,byte}>: pkg_sexplib.syntax
<core_test/core_test.{native,byte}>: pkg_stringext
<core_test/core_test.{native,byte}>: pkg_uri
<core_test/core_test.{native,byte}>: use_xenstore
<core_test/core_test.{native,byte}>: use_xenstore_userspace
<core_test/*.ml{,i,y}>: pkg_cstruct
<core_test/*.ml{,i,y}>: pkg_cstruct.lwt
<core_test/*.ml{,i,y}>: pkg_cstruct.syntax
<core_test/*.ml{,i,y}>: pkg_io-page
<core_test/*.ml{,i,y}>: pkg_io-page.unix
<core_test/*.ml{,i,y}>: pkg_lwt
<core_test/*.ml{,i,y}>: pkg_lwt.syntax
<core_test/*.ml{,i,y}>: pkg_lwt.unix
<core_test/*.ml{,i,y}>: pkg_oUnit
<core_test/*.ml{,i,y}>: pkg_sexplib
<core_test/*.ml{,i,y}>: pkg_sexplib.syntax
<core_test/*.ml{,i,y}>: pkg_stringext
<core_test/*.ml{,i,y}>: pkg_uri
<core_test/*.ml{,i,y}>: use_xenstore
<core_test/*.ml{,i,y}>: use_xenstore_userspace
<core_test/core_test.{native,byte}>: custom
# Library xenstore_kernelspace
"kernelspace/xenstore_kernelspace.cmxs": use_xenstore_kernelspace
<kernelspace/*.ml{,i,y}>: pkg_cstruct
<kernelspace/*.ml{,i,y}>: pkg_cstruct.syntax
<kernelspace/*.ml{,i,y}>: pkg_io-page
<kernelspace/*.ml{,i,y}>: pkg_lwt
<kernelspace/*.ml{,i,y}>: pkg_lwt.syntax
<kernelspace/*.ml{,i,y}>: pkg_lwt.unix
<kernelspace/*.ml{,i,y}>: pkg_sexplib
<kernelspace/*.ml{,i,y}>: pkg_sexplib.syntax
<kernelspace/*.ml{,i,y}>: pkg_shared-memory-ring
<kernelspace/*.ml{,i,y}>: pkg_shared-memory-ring.xenstore
<kernelspace/*.ml{,i,y}>: pkg_stringext
<kernelspace/*.ml{,i,y}>: pkg_uri
<kernelspace/*.ml{,i,y}>: pkg_xen-evtchn
<kernelspace/*.ml{,i,y}>: use_xenstore
# Executable xs
<xs/xs.{native,byte}>: pkg_cmdliner
<xs/xs.{native,byte}>: pkg_cstruct
<xs/xs.{native,byte}>: pkg_cstruct.lwt
<xs/xs.{native,byte}>: pkg_cstruct.syntax
<xs/xs.{native,byte}>: pkg_io-page
<xs/xs.{native,byte}>: pkg_io-page.unix
<xs/xs.{native,byte}>: pkg_lwt
<xs/xs.{native,byte}>: pkg_lwt.syntax
<xs/xs.{native,byte}>: pkg_lwt.unix
<xs/xs.{native,byte}>: pkg_sexplib
<xs/xs.{native,byte}>: pkg_sexplib.syntax
<xs/xs.{native,byte}>: pkg_stringext
<xs/xs.{native,byte}>: pkg_uri
<xs/xs.{native,byte}>: use_xenstore
<xs/xs.{native,byte}>: use_xenstore_userspace
<xs/*.ml{,i,y}>: pkg_cmdliner
<xs/*.ml{,i,y}>: pkg_cstruct
<xs/*.ml{,i,y}>: pkg_cstruct.lwt
<xs/*.ml{,i,y}>: pkg_cstruct.syntax
<xs/*.ml{,i,y}>: pkg_io-page
<xs/*.ml{,i,y}>: pkg_io-page.unix
<xs/*.ml{,i,y}>: pkg_lwt
<xs/*.ml{,i,y}>: pkg_lwt.syntax
<xs/*.ml{,i,y}>: pkg_lwt.unix
<xs/*.ml{,i,y}>: pkg_sexplib
<xs/*.ml{,i,y}>: pkg_sexplib.syntax
<xs/*.ml{,i,y}>: pkg_stringext
<xs/*.ml{,i,y}>: pkg_uri
<xs/*.ml{,i,y}>: use_xenstore
<xs/*.ml{,i,y}>: use_xenstore_userspace
<xs/xs.{native,byte}>: custom
# Executable domain_watcher
<examples/domain_watcher.{native,byte}>: pkg_cstruct
<examples/domain_watcher.{native,byte}>: pkg_cstruct.lwt
<examples/domain_watcher.{native,byte}>: pkg_cstruct.syntax
<examples/domain_watcher.{native,byte}>: pkg_io-page
<examples/domain_watcher.{native,byte}>: pkg_io-page.unix
<examples/domain_watcher.{native,byte}>: pkg_lwt
<examples/domain_watcher.{native,byte}>: pkg_lwt.syntax
<examples/domain_watcher.{native,byte}>: pkg_lwt.unix
<examples/domain_watcher.{native,byte}>: pkg_sexplib
<examples/domain_watcher.{native,byte}>: pkg_sexplib.syntax
<examples/domain_watcher.{native,byte}>: pkg_stringext
<examples/domain_watcher.{native,byte}>: pkg_uri
<examples/domain_watcher.{native,byte}>: use_xenstore
<examples/domain_watcher.{native,byte}>: use_xenstore_userspace
<examples/*.ml{,i,y}>: pkg_cstruct
<examples/*.ml{,i,y}>: pkg_cstruct.lwt
<examples/*.ml{,i,y}>: pkg_cstruct.syntax
<examples/*.ml{,i,y}>: pkg_io-page
<examples/*.ml{,i,y}>: pkg_io-page.unix
<examples/*.ml{,i,y}>: pkg_lwt
<examples/*.ml{,i,y}>: pkg_lwt.syntax
<examples/*.ml{,i,y}>: pkg_lwt.unix
<examples/*.ml{,i,y}>: pkg_sexplib
<examples/*.ml{,i,y}>: pkg_sexplib.syntax
<examples/*.ml{,i,y}>: pkg_stringext
<examples/*.ml{,i,y}>: pkg_uri
<examples/*.ml{,i,y}>: use_xenstore
<examples/*.ml{,i,y}>: use_xenstore_userspace
<examples/domain_watcher.{native,byte}>: custom
# OASIS_STOP
true: annot
<*/*.ml>: syntax_camlp4o
<unix/*.ml>: pkg_lwt.syntax
<client/*.ml>: pkg_lwt.syntax
<server/*.ml>: pkg_lwt.syntax
<server_test/binary.ml>: pkg_lwt.syntax
<core>: include
<core>: pkg_cstruct.syntax, syntax_camlp4o
<client_lwt>: include
<client_unix>: include
<server>: include
<core_test/core_test.ml>: pkg_cstruct.syntax, syntax_camlp4o
